function Networking(snakeColor) {	var socket = io();	this.id = Math.round(Math.random()*100);	let chatDisplay = null;	that = this;		socket.emit('identity', that.id);	socket.emit('color', 'RGB(' + Math.round(Math.random() * 127) + ', ' + Math.round(Math.random() * 127) + ', ' + Math.round(Math.random() * 127) + ')');		this.direction = (direction) => {		socket.emit('direction', direction);	}    this.setNick = (nick) => {        socket.emit('name', nick);    }		socket.on('position', (data) => {		that.snakes = data;	});		this.getPosition = () => {		return that.snakes;	}    this.getFruits = () => {        return that.fruits;    }    socket.on('fruits', (data) => {        that.fruits = data;    });    this.initChatDisplay = (display) => {        chatDisplay = display;    }    socket.on('chat', (data) => {        if (chatDisplay != null) {            chatDisplay.value += "\n" + data.nick + ': ' + data.message;        }    });    this.sendMessage = (message) => {        socket.emit('message', message);    }    socket.on('performance', (cps) => {        console.log(cps);    });    this.getPerformance = () => {        socket.emit('performance', '');    }}function Snake(screen) {    this.screen         = screen;    this.contextWidth   = screen.width / 1;    this.contextHeight  = screen.height / 1;    this.context        = screen.getContext('2d');        this.speedX = 0;    this.speedY = 1;    this.posX   = this.contextHeight / 2;    this.posY   = this.contextWidth / 2;        this.snakeLength = 2;    this.snakeBody = [{        x: this.posX,        y: this.posY    }];    this.snakes = [];    this.snakePartSize = 8;    this.snakeColor = 'RGB(' + Math.round(Math.random() * 255) + ', ' + Math.round(Math.random() * 255) + ', ' + Math.round(Math.random() * 255) + ')';        this.fruits = [];    this.fruitColor = '#F00';    this.fruitSize = 6;    this.fps = 0;    this.elapsedTime = 0;    this.frames = 0;    this.networking = new Networking(this.snakeColor);        that = this;        function clearScreen() {        drawRectangle(0, 0, that.contextWidth, that.contextHeight, 'rgb(255, 255, 255)');    }        function drawRectangle(x1, y1, x2, y2, color) {        that.context.fillStyle = color;        that.context.fillRect(x1, y1, x2, y2);    }        function drawSnake(snake) {        const halfSnakePartSize = snake.snakePartSize / 2;        for (let i = 0; i < snake.body.length; i++) {            drawRectangle(snake.body[i].x - halfSnakePartSize, snake.body[i].y - halfSnakePartSize, halfSnakePartSize, halfSnakePartSize, snake.color);        }    };        function drawFruits() {        const halfFruitSize = that.fruitSize / 2;        for (let i in that.fruits) {            drawRectangle(that.fruits[i].x - halfFruitSize, that.fruits[i].y - halfFruitSize, halfFruitSize, halfFruitSize, that.fruitColor);        }    }        function spawnFruit(i) {        that.fruits[i] = {            x: Math.floor(Math.random() * that.contextWidth),            y: Math.floor(Math.random() * that.contextHeight)        }    }        function move() {    	that.snakes = that.networking.getPosition();    }    function drawFPS() {    	let ctx = that.context;        ctx.fillStyle = 'red';        ctx.background = 'white';	    ctx.font = "10px Arial";	    ctx.fillText(that.fps + ' FPS', 10, 10);    }    function drawPoints() {        let ctx = that.context;        ctx.background = 'white';        ctx.font = "10px Arial";        for (let i = 0, k = 0; i < that.snakes.length; i++) {            if (that.snakes[i] === undefined || that.snakes[i] === null) {                continue;            }            ctx.fillStyle = that.snakes[i].color;            ctx.fillText(that.snakes[i].name + ' ' + that.snakes[i].body.length, 10, 25 + k * 15);            k++;        }    }        this.init = () => {        document.addEventListener('keydown', (evt) => {            switch (evt.key) {                case 'ArrowUp':                	that.networking.direction('up');                    if (that.speedY == 0) {                        that.speedX = 0;                        that.speedY = -1;                    }                    break;                case 'ArrowDown':                	that.networking.direction('down');                    if (that.speedY == 0) {                        that.speedX = 0;                        that.speedY = 1;                    }                    break;                case 'ArrowLeft':                	that.networking.direction('left');                    if (that.speedX == 0) {                        that.speedX = -1;                        that.speedY = 0;                    }                    break;                case 'ArrowRight':                    that.networking.direction('right');                    if (that.speedX == 0) {                        that.speedX = 1;                        that.speedY = 0;                    }                    break;                case 'a':                    that.networking.getPerformance();                    break;            }        });        const nick = window.location.hash.replace('#', '');        if (nick == '') {            window.location.href = 'start.html';        }        that.networking.setNick(nick);        document.getElementById('nick').value = nick;    }        this.play = () => {        that.screen.focus();        move();        clearScreen();        drawFruits();        for (let snakeNo in that.snakes) {        	if (that.snakes[snakeNo] !== null) {	        	drawSnake(that.snakes[snakeNo]);        	}        }        drawFPS();        drawPoints();        that.frames++;        if (performance.now() - that.elapsedTime >= 1000) {        	that.elapsedTime = performance.now();        	that.fps = that.frames;        	that.frames = 0;        }		requestAnimationFrame(that.play);    };    this.chat = (display, nick, input, send) => {        that.networking.initChatDisplay(display);        send.addEventListener('click', () => {            if (input.value !== '') {                that.networking.sendMessage(input.value);                input.value = '';            }        });        input.addEventListener('keypress', (evt) => {            if (evt.key === 'Enter') {                send.click();            }        });    };    return this;}game = new Snake(document.getElementById('screen'));game.init();game.chat(document.getElementById('display'), document.getElementById('nick'), document.getElementById('input'), document.getElementById('send'))requestAnimationFrame(game.play);